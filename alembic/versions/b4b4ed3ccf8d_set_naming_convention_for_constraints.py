"""Set naming convention for constraints

Revision ID: b4b4ed3ccf8d
Revises:
Create Date: 2017-10-11 13:01:28.177450

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b4b4ed3ccf8d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()


    # this doesn't work (sqlite can't delete unnamed, though duplicate indices):
    # for x in connection.execute(
    #         "SELECT name FROM sqlite_master WHERE type == 'index'"):
    #     idxname = x[0]
    #     print("dropping", idxname)
    #     op.drop_index(idxname)

    # generate new indices (as auto-detected by alembic)
    with op.batch_alter_table('action', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_action_x_sha256'), ['x_sha256'])

    with op.batch_alter_table('global', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_global_key'), ['key'])

    with op.batch_alter_table('member', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_member_address'), ['address'])
        batch_op.create_unique_constraint(batch_op.f('uq_member_name'), ['name'])
        batch_op.create_unique_constraint(batch_op.f('uq_member_x_sha256'), ['x_sha256'])

    with op.batch_alter_table('member_election_result', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_member_election_result_action_id'), ['action_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_member_election_result_new_member_id'), ['new_member_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_member_election_result_x_sha256'), ['x_sha256'])

    with op.batch_alter_table('member_list', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_member_list_previous_id'), ['previous_id'])

    with op.batch_alter_table('proposal_metadata', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_metadata_designation'), ['designation'])
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_metadata_x_sha256'), ['x_sha256'])

    with op.batch_alter_table('proposal_vote', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_vote_action_id'), ['action_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_vote_proposal_metadata_id'), ['proposal_metadata_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_vote_raw_file_id'), ['raw_file_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_vote_x_sha256'), ['x_sha256'])

    with op.batch_alter_table('proposal_vote_result', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_vote_result_vote_id'), ['vote_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_proposal_vote_result_x_sha256'), ['x_sha256'])

    with op.batch_alter_table('raw_file', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_raw_file_x_sha256'), ['x_sha256'])

    # ### end Alembic commands ###

    # delete old, auto-named indices needs to be done manually now by dumping and reimporting!
    print("WARNING: dump table now, remove superfluous indices and reimport into fresh DB!")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('raw_file', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_raw_file_x_sha256'), type_='unique')

    with op.batch_alter_table('proposal_vote_result', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_proposal_vote_result_x_sha256'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_proposal_vote_result_vote_id'), type_='unique')

    with op.batch_alter_table('proposal_vote', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_proposal_vote_x_sha256'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_proposal_vote_raw_file_id'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_proposal_vote_proposal_metadata_id'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_proposal_vote_action_id'), type_='unique')

    with op.batch_alter_table('proposal_metadata', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_proposal_metadata_x_sha256'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_proposal_metadata_designation'), type_='unique')

    with op.batch_alter_table('member_list', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_member_list_previous_id'), type_='unique')

    with op.batch_alter_table('member_election_result', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_member_election_result_x_sha256'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_member_election_result_new_member_id'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_member_election_result_action_id'), type_='unique')

    with op.batch_alter_table('member', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_member_x_sha256'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_member_name'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_member_address'), type_='unique')

    with op.batch_alter_table('global', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_global_key'), type_='unique')

    with op.batch_alter_table('action', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_action_x_sha256'), type_='unique')

    # ### end Alembic commands ###
